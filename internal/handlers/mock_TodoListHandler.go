// Code generated by mockery v2.20.0. DO NOT EDIT.

package handlers

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"

	requestAndresponse "RESTfulAPI-TodoList/models/requestAndresponse"
)

// MockTodoListHandler is an autogenerated mock type for the TodoListHandler type
type MockTodoListHandler struct {
	mock.Mock
	TodoListHandler
}

// Create provides a mock function with given fields: ctx, request
func (_m *MockTodoListHandler) Create(ctx echo.Context, request requestAndresponse.TodoListCreateRequest) error {
	ret := _m.Called(ctx, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, requestAndresponse.TodoListCreateRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, todolistId
func (_m *MockTodoListHandler) Delete(ctx echo.Context, todolistId int) error {
	ret := _m.Called(ctx, todolistId)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, int) error); ok {
		r0 = rf(ctx, todolistId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadAll provides a mock function with given fields: ctx
func (_m *MockTodoListHandler) ReadAll(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadById provides a mock function with given fields: ctx, todolistId
func (_m *MockTodoListHandler) ReadById(ctx echo.Context, todolistId int) error {
	ret := _m.Called(ctx, todolistId)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, int) error); ok {
		r0 = rf(ctx, todolistId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatus provides a mock function with given fields: ctx, todolistId, request
func (_m *MockTodoListHandler) UpdateStatus(ctx echo.Context, todolistId int, request requestAndresponse.TodoListUpdateStatus) error {
	ret := _m.Called(ctx, todolistId, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, int, requestAndresponse.TodoListUpdateStatus) error); ok {
		r0 = rf(ctx, todolistId, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTitleAndDescription provides a mock function with given fields: ctx, todolistId, request
func (_m *MockTodoListHandler) UpdateTitleAndDescription(ctx echo.Context, todolistId int, request requestAndresponse.TodoListUpdateTitleDescription) error {
	ret := _m.Called(ctx, todolistId, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, int, requestAndresponse.TodoListUpdateTitleDescription) error); ok {
		r0 = rf(ctx, todolistId, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockTodoListHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTodoListHandler creates a new instance of MockTodoListHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTodoListHandler(t mockConstructorTestingTNewMockTodoListHandler) *MockTodoListHandler {
	mock := &MockTodoListHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
